{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wiki SIKN dan JIKN Wiki SIKN dan JIKN merupakan sarana yang digunakan untuk menyimpan pengetahuan dan informasi terkait dengan pengembangan SIKN dan JIKN pada Arsip Nasional Republik Indonesia. Tujuan adalah Wiki SIKN dan JIKN ini adalah terdokumentasikannya seluruh arsitektur, rancangan, dan konfigurasi sistem SIKN dan JIKN Manfaat yang dapat diberikan adalah sebagai berikut: Pusat SIKN dan JIKN memiliki sistem standar untuk mendokumentasikan sistem aplikasi SDM IT pada pusat SIKN dan JIKN dapat menulis, saling berbagi pengetahuan dan berkolaborasi dalam pengembangan sistem Anggota simpul jaringan dapat mengakses dan mempelajari cara dan informasi teknis terkait dengan kebutuhan dan konfigurasi sistem aplikasi SIKN dan JIKN Menjaga kontinuitas sistem SIKN dan JIKN sehingg tetap terpelihara dan beroperasi dengan stabil","title":"Home"},{"location":"#wiki-sikn-dan-jikn","text":"Wiki SIKN dan JIKN merupakan sarana yang digunakan untuk menyimpan pengetahuan dan informasi terkait dengan pengembangan SIKN dan JIKN pada Arsip Nasional Republik Indonesia. Tujuan adalah Wiki SIKN dan JIKN ini adalah terdokumentasikannya seluruh arsitektur, rancangan, dan konfigurasi sistem SIKN dan JIKN Manfaat yang dapat diberikan adalah sebagai berikut: Pusat SIKN dan JIKN memiliki sistem standar untuk mendokumentasikan sistem aplikasi SDM IT pada pusat SIKN dan JIKN dapat menulis, saling berbagi pengetahuan dan berkolaborasi dalam pengembangan sistem Anggota simpul jaringan dapat mengakses dan mempelajari cara dan informasi teknis terkait dengan kebutuhan dan konfigurasi sistem aplikasi SIKN dan JIKN Menjaga kontinuitas sistem SIKN dan JIKN sehingg tetap terpelihara dan beroperasi dengan stabil","title":"Wiki SIKN dan JIKN"},{"location":"install_docker/","text":"Melihat Spesifikasi server melihat cpu lscpu informasi memory free -m informasi disk df -h informasi OS lsb_release -a set domain name export USE_HOSTNAME=nama_domain.go.id \\ && echo $USE_HOSTNAME > /etc/hostname \\ && hostname -F /etc/hostname Install the latest updates Ubuntu apt-get update && apt-get upgrade -y CentOS yum update -y \\ yum upgrade 1. download dan install docker mkdir -p /opt/docker \\ && cd /opt/docker \\ && curl -fsSL get.docker.com -o get-docker.sh \\ && CHANNEL=stable sh get-docker.sh Configure Docker to start on boot sudo systemctl enable docker && sudo systemctl start docker 2. install docker-compose (Skip jika mengggunakan docker swarm) sudo curl -L \"https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose test docker installation docker --version \\ && docker run hello-world 3. test instalasi docker-compose docker-compose --version Set Docker Experimental echo $'{\\n \"experimental\": true\\n}' | sudo tee /etc/docker/daemon.json; systemctl restart docker cek status experimental docker version -f '{{.Server.Experimental}}' Tuning virtual machines Edit /etc/sysctl.conf dengan menambahkan vm.max_map_count=262144 atau eksekusi perintah sudo sysctl -w vm.max_map_count=262144 Cek vm.max_map_count sysctl vm.max_map_count mkdir -p /etc/systemd/system/docker.service.d/ \\ && touch /etc/systemd/system/docker.service.d/10-machine.conf \\ && sudo sed -i '/ExecStart=\\/usr\\/bin\\/dockerd/ s/$/--default-ulimit memlock=-1/' /etc/systemd/system/docker.service.d/10-machine.conf akan terbentuk file override.conf pada /etc/systemd/system/docker.service.d echo -e \"[Service]\\nLimitMEMLOCK=infinity\" | SYSTEMD_EDITOR=tee systemctl edit docker.service \\ && systemctl daemon-reload && systemctl restart docker reboot Open Port on Ubuntu ufw allow 22/tcp ufw allow 2376/tcp ufw allow 2377/tcp ufw allow 7946/tcp ufw allow 7946/udp ufw allow 4789/udp ufw reload Open Port on CentOS firewall-cmd --add-port=22/tcp --permanent firewall-cmd --add-port=2376/tcp --permanent firewall-cmd --add-port=2377/tcp --permanent firewall-cmd --add-port=7946/tcp --permanent firewall-cmd --add-port=7946/udp --permanent firewall-cmd --add-port=4789/udp --permanent firewall-cmd --reload Set up swarm mode docker swarm init add manager nodes (optional) docker swarm join-token manager Add worker nodes (optional) docker swarm join-token worker check docker node ls","title":"Docker"},{"location":"install_docker/#melihat-spesifikasi-server","text":"melihat cpu lscpu informasi memory free -m informasi disk df -h informasi OS lsb_release -a","title":"Melihat Spesifikasi server"},{"location":"install_docker/#set-domain-name","text":"export USE_HOSTNAME=nama_domain.go.id \\ && echo $USE_HOSTNAME > /etc/hostname \\ && hostname -F /etc/hostname","title":"set domain name"},{"location":"install_docker/#install-the-latest-updates","text":"","title":"Install the latest updates"},{"location":"install_docker/#ubuntu","text":"apt-get update && apt-get upgrade -y CentOS yum update -y \\ yum upgrade","title":"Ubuntu"},{"location":"install_docker/#1-download-dan-install-docker","text":"mkdir -p /opt/docker \\ && cd /opt/docker \\ && curl -fsSL get.docker.com -o get-docker.sh \\ && CHANNEL=stable sh get-docker.sh","title":"1. download dan install docker"},{"location":"install_docker/#configure-docker-to-start-on-boot","text":"sudo systemctl enable docker && sudo systemctl start docker","title":"Configure Docker to start on boot"},{"location":"install_docker/#2-install-docker-compose-skip-jika-mengggunakan-docker-swarm","text":"sudo curl -L \"https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose","title":"2. install docker-compose (Skip jika mengggunakan docker swarm)"},{"location":"install_docker/#test-docker-installation","text":"docker --version \\ && docker run hello-world","title":"test docker installation"},{"location":"install_docker/#3-test-instalasi-docker-compose","text":"docker-compose --version","title":"3. test instalasi docker-compose"},{"location":"install_docker/#set-docker-experimental","text":"echo $'{\\n \"experimental\": true\\n}' | sudo tee /etc/docker/daemon.json; systemctl restart docker cek status experimental docker version -f '{{.Server.Experimental}}' Tuning virtual machines Edit /etc/sysctl.conf dengan menambahkan vm.max_map_count=262144 atau eksekusi perintah sudo sysctl -w vm.max_map_count=262144 Cek vm.max_map_count sysctl vm.max_map_count mkdir -p /etc/systemd/system/docker.service.d/ \\ && touch /etc/systemd/system/docker.service.d/10-machine.conf \\ && sudo sed -i '/ExecStart=\\/usr\\/bin\\/dockerd/ s/$/--default-ulimit memlock=-1/' /etc/systemd/system/docker.service.d/10-machine.conf akan terbentuk file override.conf pada /etc/systemd/system/docker.service.d echo -e \"[Service]\\nLimitMEMLOCK=infinity\" | SYSTEMD_EDITOR=tee systemctl edit docker.service \\ && systemctl daemon-reload && systemctl restart docker reboot","title":"Set Docker Experimental"},{"location":"install_docker/#open-port-on-ubuntu","text":"ufw allow 22/tcp ufw allow 2376/tcp ufw allow 2377/tcp ufw allow 7946/tcp ufw allow 7946/udp ufw allow 4789/udp ufw reload","title":"Open Port on Ubuntu"},{"location":"install_docker/#open-port-on-centos","text":"firewall-cmd --add-port=22/tcp --permanent firewall-cmd --add-port=2376/tcp --permanent firewall-cmd --add-port=2377/tcp --permanent firewall-cmd --add-port=7946/tcp --permanent firewall-cmd --add-port=7946/udp --permanent firewall-cmd --add-port=4789/udp --permanent firewall-cmd --reload","title":"Open Port on CentOS"},{"location":"install_docker/#set-up-swarm-mode","text":"docker swarm init add manager nodes (optional) docker swarm join-token manager Add worker nodes (optional) docker swarm join-token worker check docker node ls","title":"Set up swarm mode"},{"location":"portainer/","text":"Persiapan Pastikan network traefik-public sudah ada a. buat domain untuk dashboard portainer contoh: portainer-arsip.karangasemkab.go.id export DOMAIN=portainer-arsip.nama_simpul.go.id \\ && export NODE_ID=$(docker info -f '{{.Swarm.NodeID}}') \\ && docker node update --label-add portainer.portainer-data=true $NODE_ID b. arahkan domain tersebut ke host docker (Private/Puclic IP) download/buat docker-compose untuk portainer simpan dalam file portainer.yml mkdir -p /opt/portainer \\ && cd /opt/portainer/ \\ && curl https://raw.githubusercontent.com/gitsikn/atom/stable/2.5.x/docker/portainer.yml -o portainer.yml untuk mode docker-swarm nano portainer.yml version: '3.3' services: agent: image: portainer/agent environment: AGENT_CLUSTER_ADDR: tasks.agent volumes: - /var/run/docker.sock:/var/run/docker.sock - /var/lib/docker/volumes:/var/lib/docker/volumes networks: - agent-network deploy: mode: global placement: constraints: - node.platform.os == linux portainer: image: portainer/portainer command: -H tcp://tasks.agent:9001 --tlsskipverify volumes: - portainer-data:/data networks: - agent-network - traefik-public deploy: placement: constraints: - node.role == manager - node.labels.portainer.portainer-data == true labels: - traefik.frontend.rule=Host:${DOMAIN?Variable DOMAIN not set} - traefik.enable=true - traefik.port=9000 - traefik.tags=traefik-public - traefik.docker.network=traefik-public # Traefik service that listens to HTTP - traefik.redirectorservice.frontend.entryPoints=http - traefik.redirectorservice.frontend.redirect.entryPoint=https # Traefik service that listens to HTTPS - traefik.webservice.frontend.entryPoints=https networks: agent-network: attachable: true traefik-public: external: true volumes: portainer-data: untuk single node version: '2' services: portainer: image: portainer/portainer command: -H unix:///var/run/docker.sock restart: always ports: - 9000:9000 volumes: - /var/run/docker.sock:/var/run/docker.sock - portainer_data:/data volumes: portainer_data: deploy portainer swarm mode docker stack deploy -c portainer.yml portainer deploy portainer single node docker-compose -f portainer.yml up -d Cek docker ps docker logs portainer_container_id Cek User Interface https://portainer.domain_name","title":"Portainer"},{"location":"portainer/#deploy-portainer-swarm-mode","text":"docker stack deploy -c portainer.yml portainer","title":"deploy portainer swarm mode"},{"location":"portainer/#deploy-portainer-single-node","text":"docker-compose -f portainer.yml up -d","title":"deploy portainer single node"},{"location":"portainer/#cek","text":"docker ps docker logs portainer_container_id","title":"Cek"},{"location":"portainer/#cek-user-interface","text":"https://portainer.domain_name","title":"Cek User Interface"},{"location":"traefik/","text":"swarm mode Persiapan referensi: https://docs.traefik.io/user-guide/docker-and-lets-encrypt/ https://github.com/wekan/wekan/wiki/Traefik-and-self-signed-SSL-certs membuat network yang digunakan oleh traefik dan container docker network create --driver=overlay traefik-public docker network ls membuat env variable, sesuaikan parameter export EMAIL=nama_email && export DOMAIN=nama_root_domain && export USERNAME=admin && export PASSWORD=changethis && export HASHED_PASSWORD=$(openssl passwd -apr1 $PASSWORD) && echo $HASHED_PASSWORD && export CONSUL_REPLICAS=0 && export TRAEFIK_REPLICAS=1 Download file konfigurasi traefik mkdir /opt/traefik \\ && cd /opt/traefik \\ && curl -L https://raw.githubusercontent.com/gitsikn/atom/stable/2.5.x/docker/traefik.yml -o traefik.yml deploy traefik-consul docker stack deploy -c traefik.yml traefik-consul docker stack ps traefik-consul melihat log docker service logs traefik-consul_traefik Buat lokal DNS C:\\Windows\\System32\\drivers\\etc test web ui traefik https://traefik-arsip.nama_domain test web-ui consul https://consul-arsip.nama_domain single node (optional) docker network create web mkdir -p /opt/traefik touch /opt/traefik/docker-compose.yml version: '2' services: traefik: image: traefik restart: always ports: - 80:80 - 443:443 networks: - web volumes: - /var/run/docker.sock:/var/run/docker.sock - /opt/traefik/traefik.toml:/traefik.toml - /opt/traefik/acme.json:/acme.json container_name: traefik networks: web: external: true touch /opt/traefik/acme.json && chmod 600 /opt/traefik/acme.json touch /opt/traefik/traefik.toml debug = false logLevel = \"ERROR\" defaultEntryPoints = [\"https\",\"http\"] [entryPoints] [entryPoints.http] address = \":80\" [entryPoints.http.redirect] entryPoint = \"https\" [entryPoints.https] address = \":443\" [entryPoints.https.tls] [retry] [docker] endpoint = \"unix:///var/run/docker.sock\" domain = \"dispustaka.karangasemkab.go.id\" watch = true exposedByDefault = false [acme] email = \"eka.wd88@gmail.com\" storage = \"acme.json\" entryPoint = \"https\" onHostRule = true [acme.httpChallenge] entryPoint = \"http\" docker-compose -f docker-compose.yml up -d ```","title":"Traefik"},{"location":"traefik/#swarm-mode","text":"","title":"swarm mode"},{"location":"traefik/#persiapan","text":"referensi: https://docs.traefik.io/user-guide/docker-and-lets-encrypt/ https://github.com/wekan/wekan/wiki/Traefik-and-self-signed-SSL-certs membuat network yang digunakan oleh traefik dan container docker network create --driver=overlay traefik-public docker network ls membuat env variable, sesuaikan parameter export EMAIL=nama_email && export DOMAIN=nama_root_domain && export USERNAME=admin && export PASSWORD=changethis && export HASHED_PASSWORD=$(openssl passwd -apr1 $PASSWORD) && echo $HASHED_PASSWORD && export CONSUL_REPLICAS=0 && export TRAEFIK_REPLICAS=1 Download file konfigurasi traefik mkdir /opt/traefik \\ && cd /opt/traefik \\ && curl -L https://raw.githubusercontent.com/gitsikn/atom/stable/2.5.x/docker/traefik.yml -o traefik.yml deploy traefik-consul docker stack deploy -c traefik.yml traefik-consul docker stack ps traefik-consul melihat log docker service logs traefik-consul_traefik","title":"Persiapan"},{"location":"traefik/#buat-lokal-dns","text":"C:\\Windows\\System32\\drivers\\etc test web ui traefik https://traefik-arsip.nama_domain test web-ui consul https://consul-arsip.nama_domain","title":"Buat lokal DNS"},{"location":"traefik/#single-node-optional","text":"docker network create web mkdir -p /opt/traefik touch /opt/traefik/docker-compose.yml version: '2' services: traefik: image: traefik restart: always ports: - 80:80 - 443:443 networks: - web volumes: - /var/run/docker.sock:/var/run/docker.sock - /opt/traefik/traefik.toml:/traefik.toml - /opt/traefik/acme.json:/acme.json container_name: traefik networks: web: external: true touch /opt/traefik/acme.json && chmod 600 /opt/traefik/acme.json touch /opt/traefik/traefik.toml debug = false logLevel = \"ERROR\" defaultEntryPoints = [\"https\",\"http\"] [entryPoints] [entryPoints.http] address = \":80\" [entryPoints.http.redirect] entryPoint = \"https\" [entryPoints.https] address = \":443\" [entryPoints.https.tls] [retry] [docker] endpoint = \"unix:///var/run/docker.sock\" domain = \"dispustaka.karangasemkab.go.id\" watch = true exposedByDefault = false [acme] email = \"eka.wd88@gmail.com\" storage = \"acme.json\" entryPoint = \"https\" onHostRule = true [acme.httpChallenge] entryPoint = \"http\" docker-compose -f docker-compose.yml up -d ```","title":"single node (optional)"}]}